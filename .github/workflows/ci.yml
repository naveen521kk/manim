name: CI
on:
  pull_request:
      branches:
        - master

jobs:
  format:
    runs-on: windows-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install black
        run: pip install black

      - name: Check manim formatting
        run: black manim tests example_scenes

      - name: Check for modified files
        shell: bash
        id: git-check
        run: |
          echo ::set-output name=modified::$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)
          git ls-files -m>/d/diffmod.txt
      - name: Get authors name and email
        id: get-name
        run: |
          $payload = (gc "$env:GITHUB_EVENT_PATH") | ConvertFrom-Json
          $authorEmail = $payload.head_commit.author.email
          $authorName = $payload.head_commit.author.name
          echo ::set-output name=authorName::$($authorName)
          echo ::set-output name=authorEmail::$($authorEmail)

      - name: Commit the changes if any
        shell: bash
        if: steps.git-check.outputs.modified == 'true'
        env:
          authorName: ${{ steps.get-name.outputs.authorName }}
          authorEmail: ${{ steps.get-name.outputs.authorEmail }}
        run: |
          blackVer=$(black --version)
          blackVersion=$(python -c "print('${blackVer}'.split()[2])")
          pushBranch="black-${blackVersion}-${$authorName}"
          git config user.name "${$authorName}"
          git config user.email "${$authorEmail}"
          git checkout -B "$pushBranch"
          git add .
          git commit -m "Running Black On Master"
          git push -u origin "${pushBranch}" --force

      - name: Make a PR
        if: steps.git-check.outputs.modified == 'true'
        env:
          access_token: ${{ secrets.GITHUB_TOKEN }}
          authorName: ${{ steps.get-name.outputs.authorName }}
        run: |
          $blackVer = black --version
          $blackVersion = python -c "print('$($blackVer)'.split()[2])"
          $pushBranch="black-$($blackVersion)-$($env:authorName)"
          $filechange=(gc "D:/diffmod.txt").split() -join "`n`n"
          $postContents = @{title="Automated PR: Autoformat with black";
          head="naveen521kk:$($pushBranch)";
          base="master";
          body="This an automated pull requests. Files Changed are `n `n ```````n$($filechange)`n``````"
          } | ConvertTo-Json -Compress
          echo "$postContents"
          Invoke-WebRequest `
            -Method POST `
            -Headers @{ "Accept" = "application/vnd.github.v3+json"; "Authorization"= "token $($env:access_token)"}`
            -Uri https://api.github.com/repos/$($env:GITHUB_REPOSITORY)/pulls `
            -Body "$($postContents)"
      - name: Delete Branch
        shell: bash
        run: |
          $blackVer = black --version
          $blackVersion = python -c "print('$($blackVer)'.split()[2])"
          $pushBranch="black-$($blackVersion)-$($env:authorName)"
          git push -d origin "$pushBranch"

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: [3.6, 3.7, 3.8]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Get pip cache dir
        shell: bash
        id: pip-cache-and-time
        run: |
           echo "::set-output name=dir::$(pip cache dir)"
           echo "::set-output name=date::$(/bin/date -u "+%m%Y")"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache-and-time.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ matrix.python }}-${{ steps.pip-cache-and-time.outputs.date }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y ffmpeg
          sudo apt-get -y install texlive texlive-latex-extra texlive-fonts-extra texlive-latex-recommended texlive-science texlive-fonts-extra tipa

      - name: Install system dependencies (MacOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl readline ffmpeg sox pyenv pyenv-virtualenv
          brew cask install basictex
          eval "$(/usr/libexec/path_helper -s)"
          sudo tlmgr update --self
          sudo tlmgr install standalone preview doublestroke relsize fundus-calligra wasysym physics dvisvgm.x86_64-darwin dvisvgm rsfs wasy cm-super
          echo "::set-env name=PATH::$PATH"

      - name: Cache Windows
        id: cache-windows
        if: runner.os == 'Windows'
        uses: actions/cache@v2
        with:
         path: ${{ github.workspace }}\ManimCache
         key: ${{ runner.os }}-dependencies-ffmpeg-sox-tinytex-${{ hashFiles('.github/manimdependency.json') }}-${{ steps.pip-cache-and-time.outputs.date }}

      - name: Download system dependencies (Windows)
        if: runner.os == 'Windows' && steps.cache-windows.outputs.cache-hit != 'true'
        run: |
          $soxVersion = python -c "import json;print(json.load(open('.github/manimdependency.json'))['windows']['sox'])"
          $soxVersionNumber = python -c "import json;print(json.load(open('.github/manimdependency.json'))['windows']['sox'].split('-')[1])"
          $ffmpegVersion = python -c "import json;print(json.load(open('.github/manimdependency.json'))['windows']['ffmpeg'])"
          $ffmpegVersionNumber = python -c "import json;print(json.load(open('.github/manimdependency.json'))['windows']['ffmpeg'].split('-')[1])"
          $OriPath = $env:PATH
          echo "Install Tinytex"
          Invoke-WebRequest "https://ci.appveyor.com/api/projects/yihui/tinytex/artifacts/TinyTeX.zip?job=image:%20Visual%20Studio%202019" -O "$($env:TMP)\TinyTex.zip"
          Expand-Archive -LiteralPath "$($env:TMP)\TinyTex.zip" -DestinationPath "$($PWD)\ManimCache\LatexWindows"
          $env:Path = "$($PWD)\ManimCache\LatexWindows\TinyTeX\bin\win32;$($env:PATH)"
          tlmgr install standalone preview doublestroke ms setspace rsfs relsize ragged2e fundus-calligra microtype wasysym physics dvisvgm jknapltx wasy cm-super babel-english
          $env:PATH=$OriPath
          echo "Completed Latex Install Sox"
          Invoke-WebRequest "https://downloads.sourceforge.net/project/sox/sox/$($soxVersionNumber)/$($soxVersion).zip" -UserAgent "wget" -O "$($env:TMP)\SoX.zip"
          7z x "$($env:TMP)\SoX.zip" -o"$($PWD)\ManimCache"
          Move-Item "ManimCache\sox-*" "ManimCache\SoX"
          Invoke-WebRequest https://ffmpeg.zeranoe.com/builds/win64/static/$($ffmpegVersion).zip -O "$($env:TMP)\$($ffmpegVersion).zip"
          7z x "$($env:TMP)\$($ffmpegVersion).zip" -o"$($PWD)\ManimCache"
          Move-Item "ManimCache\ffmpeg-*" "ManimCache\FFmpeg"

      - name: Add Windows dependecies to path
        if: runner.os == 'Windows'
        run: |
          $env:Path += ";" + "$($PWD)\ManimCache\FFmpeg\bin"
          $env:Path += ";" + "$($PWD)\ManimCache\LatexWindows\TinyTeX\bin\win32"
          $env:Path += ";" + "$($PWD)\ManimCache\SoX"
          echo "::set-env name=Path::$env:Path"

      - name: Install Pycairo (Non-Windows)
        if: runner.os == 'macOS' || runner.os == 'Linux'
        run: pip install pycairo

      - name: Install Pycairo (Windows)
        if: runner.os == 'Windows'
        run: python ./scripts/pycairoinstall.py

      - name: Install manim
        run: |
          pip install wheel
          pip install . pytest

      - name: Run tests
        run: pytest

      - name: Run module doctests
        run: pytest --doctest-modules manim
